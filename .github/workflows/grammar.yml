name: Typst Grammar Check

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.typ'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.typ'
  workflow_dispatch:

jobs:
  grammar-check:
    name: Check Grammar in Typst Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Check Nixpkgs inputs
        uses: DeterminateSystems/flake-checker-action@main
        with:
          fail-mode: true

      # Fetch the latest commit hash of the typst-languagetool repository
      - name: Get latest commit hash
        id: get-commit-hash
        run: |
          REPO_URL="https://github.com/antonWetzel/typst-languagetool"
          COMMIT_HASH=$(git ls-remote "$REPO_URL" HEAD | cut -f 1)
          echo "Commit hash: $COMMIT_HASH"
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      # Cache Cargo registry and target directories
      # - name: Cache Cargo dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #       ~/.cargo/bin
      #     key: ${{ runner.os }}-cargo-${{ steps.get-commit-hash.outputs.commit_hash }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      # Check if the binary is already installed (from cache)
      - name: Check if binary is cached
        id: check-binary
        run: |
          if command -v typst-languagetool &> /dev/null; then
            echo "Binary already installed"
            echo "cached=true" >> $GITHUB_OUTPUT
          else
            echo "Binary not found in cache"
            echo "cached=false" >> $GITHUB_OUTPUT
          fi

      # Install the grammar checker only if the binary is not cached
      - name: Install dependencies and grammar checker
        if: steps.check-binary.outputs.cached != 'true'
        run: |
          nix develop --command bash -c "cargo install --git=https://github.com/antonWetzel/typst-languagetool cli --features=bundle"

      # Cache LanguageTool
      - name: Cache LanguageTool
        id: cache-languagetool
        uses: actions/cache@v4
        with:
          path: LanguageTool
          key: ${{ runner.os }}-languagetool-20250307
          restore-keys: |
            ${{ runner.os }}-languagetool-

      # Install LanguageTool (if not cached)
      - name: Download and install LanguageTool
        if: steps.cache-languagetool.outputs.cache-hit != 'true'
        id: install-languagetool
        run: |
          # Download LanguageTool
          LT_URL="https://internal1.languagetool.org/snapshots/LanguageTool-20250307-snapshot.zip"
          LT_ZIP="LanguageTool.zip"
          LT_DIR="LanguageTool"

          echo "Downloading LanguageTool..."
          curl -L -o "$LT_ZIP" "$LT_URL"

          # Extract LanguageTool
          echo "Extracting LanguageTool..."
          mkdir -p "$LT_DIR"
          unzip -q "$LT_ZIP" -d "$LT_DIR"

          # Clean up
          rm "$LT_ZIP"

      # Find the .jar file and set it as an environment variable
      - name: Set LanguageTool .jar path
        run: |
          LT_JAR=$(find LanguageTool -name "languagetool-commandline.jar" | head -n 1)
          if [ -z "$LT_JAR" ]; then
            echo "::error::LanguageTool .jar file not found!"
            exit 1
          fi

          echo "LanguageTool .jar path: $LT_JAR"
          echo "LT_JAR_PATH=$LT_JAR" >> $GITHUB_ENV

      - name: Run Grammar Check
        run: |
          # Create wrapper script
          cat > grammar-check-wrapper.sh << 'EOF'
          #!/usr/bin/env bash
          GRAMMAR_CHECKER="typst-languagetool"
          OUTPUT_FILE="/tmp/grammar_check_output.txt"
          ERROR_PATTERN="(info|Failed to compile document)"

          # Run the grammar checker and capture its output
          $GRAMMAR_CHECKER "$@" --jar-location="$LT_JAR_PATH" | tee "$OUTPUT_FILE"

          # Check if the output contains any error indicators
          if grep -Ei "$ERROR_PATTERN" "$OUTPUT_FILE" > /dev/null; then
              echo "::error::Grammar issues found. Check the output above."
              exit 1
          else
              echo "::notice::No grammar issues detected."
              exit 0
          fi
          EOF
          chmod +x grammar-check-wrapper.sh
        
          # Use the wrapper script
          nix develop --command bash -c "./grammar-check-wrapper.sh check --bundle --main=main.typ --options=typst_languagetool.json"